#user  nobody;
worker_processes  1;

error_log  logs/error.log debug;

events {
    worker_connections  1024;
}

http {
#    upstream backend {
#	server 192.168.1.5;
#	server 192.168.1.7;
#	server 192.168.1.4;

 #   }
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;
    geoip_country /usr/local/nginx/geoip/GeoIP.dat; # the country IP database
    geoip_city /usr/local/nginx/geoip/GeoLiteCity.dat; # the city IP database
    
# map country code to specific NGINX upstream
    #map $geoip_country_code $backend {
     #   US              web_russia;
      #  IN              web_india;
       # default         web_russia;
   # }
 geo $geo {
     	default default;
        include geo.conf;
    }
    upstream US.backend {
		#zone web-india 64k;
		server 192.168.1.5;
	}

    upstream default.backend{
		server 192.168.1.5;
	}

	upstream IN.backend {
		#zone web-russia 64k;
		server 192.168.1.7;
	}

    server {
        listen       80;
        server_name  localhost;
	
	location / {
		### SET GEOIP Variables ###
		proxy_set_header GEOIP_COUNTRY_CODE $geoip_country_code;
		proxy_set_header GEOIP_COUNTRY_CODE3 $geoip_country_code3;
		proxy_set_header GEOIP_COUNTRY_NAME $geoip_country_name;

		proxy_set_header GEOIP_CITY_COUNTRY_CODE $geoip_city_country_code;
		proxy_set_header GEOIP_CITY_COUNTRY_CODE3 $geoip_city_country_code3;
		proxy_set_header GEOIP_CITY_COUNTRY_NAME $geoip_city_country_name;
		proxy_set_header GEOIP_REGION $geoip_region;
		proxy_set_header GEOIP_CITY $geoip_city;
		proxy_set_header GEOIP_POSTAL_CODE $geoip_postal_code;
		proxy_set_header GEOIP_CITY_CONTINENT_CODE $geoip_city_continent_code;
		proxy_set_header GEOIP_LATITUDE $geoip_latitude;
		proxy_set_header GEOIP_LONGITUDE $geoip_longitude;
		proxy_pass http://$geo.backend;
	}
        #rtmp stat
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }
        location /stat.xsl {
            # you can move stat.xsl to a different location
            root /usr/build/nginx-rtmp-module;
        }

        # rtmp control
        location /control {
            rtmp_control all;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
        # Serve live DASH fragments
        location /dash_live {
          # defines where the DASH files will retrieved on the server filesystem
          alias /usr/local/nginx/Videos/live;

          # necessary if media files contain more than one DASH fragment
          if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';

            # Custom headers and headers various browsers *should* be OK with but aren't
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';

            # Tell client that this pre-flight info is valid for 20 days
            add_header 'Access-Control-Max-Age' 1728000;

            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            add_header 'Access-Control-Allow-Origin' '*';

            return 200;
          }

          if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            }

          # necessary for live content (manifest must always be loaded from server, not from cache)
          add_header Cache-Control no-cache;
        }

        # Serve vod DASH fragments
        location /dash_vod2 {
         alias /usr/local/nginx/Videos/vod;

          # necessary if media files contain more than one DASH fragment
          if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';

            # Custom headers and headers various browsers *should* be OK with but aren't
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';

            # Tell client that this pre-flight info is valid for 20 days
            add_header 'Access-Control-Max-Age' 1728000;

            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            add_header 'Access-Control-Allow-Origin' '*';

            return 200;
          }

          if ($request_method = 'GET') {
              add_header 'Access-Control-Allow-Origin' '*';
              add_header 'Access-Control-Allow-Credentials' 'true';
              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
              add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
          }
	  
 
      }
  }
}


rtmp {
    server {
        listen 1935;
        ping 30s;
        notify_method get;
	      chunk_size 4000;

        application dash {
            live on;
            dash on;
            dash_playlist_length 60s;
            dash_fragment 5s;
            # defines where dash files will generated on the server filesystem
            dash_path /usr/local/nginx/Videos/live;
        }

      	# src rtmp application that receives a stream, transcodes it
      	# and sends it to DASH live rtmp application
      	application src {
      	    live on;

      	    # transcodes the stream to a format compatible with DASH and sends it to DASH
      	    # live rtmp application
      	    exec ffmpeg -i rtmp://localhost/$app/$name -threads 2 -c:v libx264 -profile:v baseline -g 10 -b:v 300K -s 320x240 -c:a aac -ac 1 -strict -2 -b:a 64k -f flv rtmp://localhost/dash/${name};
      	}
    }
}


